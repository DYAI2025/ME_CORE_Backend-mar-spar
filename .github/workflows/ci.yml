name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'  # Standardized to 3.11
  NODE_VERSION: '18'
  JAVA_VERSION: '11'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4  # Updated to v4
    
    - name: Set up Python
      uses: actions/setup-python@v5  # Updated to v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v4  # Updated to v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements-base.txt  # Fixed reference
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Type check with mypy
      run: |
        cd backend
        mypy app --ignore-missing-imports
    
    - name: Test with pytest
      env:
        DATABASE_URL: mongodb://localhost:27017/test_db
        REDIS_URL: redis://localhost:6379/0
        SPARK_NLP_ENABLED: false
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage
      uses: codecov/codecov-action@v4  # Updated to v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  spark-tests:
    name: Spark NLP Tests (Optional)
    runs-on: ubuntu-latest
    if: false  # Disabled as repository is moving away from Spark
    
    steps:
    - uses: actions/checkout@v4  # Updated to v4
    
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Spark dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/spark
        key: ${{ runner.os }}-spark-${{ hashFiles('spark-nlp/requirements*.txt') }}
    
    - name: Install dependencies
      run: |
        cd spark-nlp
        pip install -r requirements-spark.txt
        pip install pytest pytest-spark
    
    - name: Run Spark tests
      run: |
        cd spark-nlp
        pytest tests/ -v

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4  # Updated to v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4  # Updated to v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint
      run: |
        cd frontend
        npm run lint
    
    - name: Type check
      run: |
        cd frontend
        npm run type-check
    
    - name: Test
      run: |
        cd frontend
        npm run test:ci  # Use the CI-specific test command
    
    - name: Build
      run: |
        cd frontend
        npm run build

  integration-tests:
    name: Integration Tests
    needs: [backend-tests, frontend-tests]  # Removed spark-tests dependency
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4  # Updated to v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3  # Updated to v3
    
    - name: Build images
      run: |
        docker-compose build
    
    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4  # Updated to v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Set up Python for security checks
      uses: actions/setup-python@v5  # Updated to v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Python security check
      run: |
        pip install safety bandit
        cd backend && safety check -r requirements-base.txt  # Fixed file reference
        cd backend && bandit -r . -f json -o bandit-report.json
    
    - name: NPM audit
      run: |
        cd frontend && npm audit --production